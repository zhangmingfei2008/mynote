.LOG

9:24 2018/7/13
1、什么是WinSCP
WinSCP 是一个 Windows 环境下使用的 SSH 的开源图形化 SFTP 客户端。同时支持 SCP 协议。它的主要功能是在本地与远程计算机间安全地复制文件，并且可以直接编辑文件。
18:34 2018/7/13
1、学习《Hardware Architectural Specification》至P15
13:42 2018/7/17
1、andes工程修改
1）修改core_wrap_andes.v文件，将输入端口SRSTn去掉；
2）修改andes.xdc文件，将SRSTn端口的约束去掉；
之前的修改：
1）修改SHAB55_8192X8X8CM8b1.v文件；
2）修改andes_cpu_test_for_n10.v文件，修改JTAG接口的连接及其它一些信号的连接；

9:40 2018/7/18
1、使用Vim比较两个文件
1）. 使用vim的比较模式打开两个文件：
vim -d file1 file2
或
vimdiff file1 file2 
2）. 如果已经打开了文件file1，再打开另一个文件file2进行比较：
:vert diffsplit file2
如果没有用vert命令，diffsplit则会分上下两个窗口。 
3）. 如果已经用split方式打开了两个文件file1，file2，又想比较两文件的不同。
 分别在两个窗口里面输入命令：
:diffthis 
4）. 如果更改了某个窗口的内容，vim又没有自动更新diff检查，可以使用如下命令更新：
:diffupdate 
5）. 定位到不同点：
[c     跳到前一个不同点
]c     跳到后一个不同点 
6）. 在窗口间跳转：
ctrl-w w    跳到下一个窗口
ctrl-w h    跳到左侧窗口
ctrl-w l    跳到右侧窗口
ctrl-w j    跳到下方的窗口
ctrl-w k    跳到上方的窗口 
7）. 合并文档：
dp          将差异点的当前文档内容应用到另一文档（diff put）
do          将差异点的另一文档的内容拷贝到当前文档（diff get） 
8）. 上下文的展开和查看
 比较和合并文件的时候经常需要结合上下文来确定最终要采取的操作。Vimdiff 缺省是会把不同之处上下各 6 行的文本都显示出来以供参考。其他的相同的文本行被自动折叠。如果希望修改缺省的上下文行数为3行，可以这样设置：
:set diffopt=context:3 
zf   创建折叠（使用数字表示创建有当前行到下多少行的折叠，比如3j就创建包括4行的折叠）
    zo   打开折叠(l也可以打开折叠）
    zc   关闭当前折叠
    zm   关闭所有折叠
    zr   打开所有折叠
    zE   删除所有折叠
    zd   删除当前折叠
    za   若当前打开则关闭，若当前关闭则打开
    zj   到下一折叠的开始处
    zk   到上一折叠的末尾 

13:41 2018/7/19
1、soc first case bring up :
1）. c程序，参考/Data/usr/zhuhaizhou/Unione_soc_sim/unisound_risc/sim/vec/stimulus/c_pattern/MAE/mae.c
2）. 编译c代码，并启动VCS仿真脚本，参考/Data/usr/zhuhaizhou/Unione_soc_sim/unisound_risc/sim/ddr_l2_xyz_mae_caddvv/run_sim_model
3）. load编译之后的c程序到CPU指定的memory中，参考/Data/usr/zhuhaizhou/Unione_soc_sim/unisound_risc/sim/vec/testbench/system.v
2、利用Unione SoC仿真环境进行 .c编译的过程
1）工程目录unione_pro
2）首先，需要source一个script，即unisound.env，目录为unione_pro/soc_sim/script/unisound.env，unisound.env文件中的AICHIP_ROOT需要进行相应的设定（根据不同工作目录）；
3）在unione_pro/soc_sim/unisound_risc/sim/dsp_faddc目录下运行：./run_sim_model mae co ./../../../case/MAE/dsp_case_list
4）confic.mk文件存放位置，unione_pro/soc_sim/mkpat/config.mk
5）输入.c文件存放位置，unione_pro/soc_sim/unisound_risc/sim/vec/stimulus/c_pattern/MAE/mae.c
6）编译结果文件存放位置：unione_pro/soc_sim/unisound_risc/sim/vec/stimulus/build/mae/mae.elf等


18:31 2018/7/19
1、如何将C程序加载到开发板中实现的系统进行调试？
第一步：编写C程序；
第二步：编译C程序，利用arm的编译环境进行编译，生成 .elf文件
第三步：利用JTAG调试工具CVD连接编程完毕的开发板，获得ARM CPU的控制权（相关文件.csf文件）；
第四步：利用JTAG调试工具CVD加载 .elf文件，需要通过一个 .cmm文件实现；
第五步：运行调试；

14:02 2018/7/20
1、用于基于ARM系统的C编译工程
目录：/Data/usr/zhangwang/projects/unione_nvdla
编译脚本：build.sh
源文件位置：/Data/usr/zhangwang/projects/unione_nvdla/app/src目录下main_1.c
编译输出文件位置：/Data/usr/zhangwang/projects/unione_nvdla/out/build目录下app2.elf
2、将工程拷贝至CVD环境处：
     1）通过 .csf文件配置ARM JTAG
     2）通过 .cmm文件载入 .elf文件至Memory
     3）通过SymbolBrowse View查找函数名
     4）通过Config->Source Path可以指定源程序
     5）通过Registor View查看寄存器值
     6）通过Memory Dump View查看存储器的值

20:02 2018/7/20
1、完成了nvdla_config.c文件的编写，没有包括nvdla原.cfg文件中的几行配置：前5行，poll_reg_equal，和最后两行；
2、NVDLA，opendla.h存放位置：nvdla/hw/outdir/nv_small/spec/manual/
3、dc_24x44x14_5x3x14x41_int8_0.cfg文件存放位置：nvdla/hw/sim/dc_xxx/dc_xxx/xxx.cfg

9:47 2018/7/23
1、NVDLA_GitHub账号：zhangmingfei2008，xx20xxxxxx
2、新版本unione_nvdla的编译环境有问题：程序无法访问DDR存储空间；
3、A Beginner's Guide To Understanding Convolutional Neural Networks：学习至Fully Connected Layer；

14:06 2018/7/24
Linux 压缩解压缩命令详解 
压缩
tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg 
tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz
 tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2
tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z
rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux
zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux
解压
tar -xvf file.tar //解压 tar包
tar -xzvf file.tar.gz //解压tar.gz
tar -xjvf file.tar.bz2   //解压 tar.bz2
tar -xZvf file.tar.Z   //解压tar.Z
unrar e file.rar //解压rar
unzip file.zip //解压zip
总结
1、*.tar 用 tar -xvf 解压
2、*.gz 用 gzip -d或者gunzip 解压
3、*.tar.gz和*.tgz 用 tar -xzf 解压
4、*.bz2 用 bzip2 -d或者用bunzip2 解压
5、*.tar.bz2用tar -xjf 解压
6、*.Z 用 uncompress 解压
7、*.tar.Z 用tar -xZf 解压
8、*.rar 用 unrar e解压
9、*.zip 用 unzip 解压

9:37 2018/7/25
1、添加了NVDLA的andes工程实现时，产生ERROR，有个Black模块例化有问题，通过注释发现该模块的例化在进行FPGA实现时不需要，因此修改一个头文件nvdla/hw/outdir/nv_small/vmod/include/simulate_x_tich.vh，增加了一个宏定义`define FPGA，并将该头文件加入工程，再次进行实现，通过；

15:10 2018/7/26
1、andes_cpu_n10工程，集成了NVDLA，NVDLA的Test Case的配置初始化数据，存储在projects/andes_cpu_n10/sim/dt_wt.dat，这些数据需要预先存储在系统128KSRAM中；
2、C程序的编译环境存储在projects/andes_cpu_n10/sim/unione_nvdla目录（采用的是“风和”提供的第二个精简版本），修改config_cpu2.mk，将其中的CONFIG_TEXT_BASE=0xffff0100；工程里面的RAM00的地址为fffe0000开始，64KB，RAM01的地址为ffff0000开始，64KB；

19:24 2018/7/27
1、Git在Windows下下载的仓库通过FTP传递到Linux系统下，一些文件的属性会发生变化，文本文件的内容也会有差异，需要做两个事情：
1）利用chmod -R 755 hw/ ，修改hw文件夹下的所有文件的属性为755；
2）利用find hw/ -name "*" | xargs dos2unix，将hw文件夹下的所有文本文件做一个转换。（注：unix换行符（\n）与Windows换行符(\r\n)有差异）;

16:15 2018/7/30
1、unione_nvdla_old编译平台的修改：关闭了DDR所有的CACHE模式；
2、CVD调试无法写入NVDLA的配置寄存器：将Config选项中的Memory配置为NoCache；

9:36 2018/7/31
Vim命令：
1、设置行号set nu
2、拷贝：nyy

3、NVDLA Test Case测试结果分块写入的问题解决办法：根据图像尺寸修改配置参数NVDLA_SDP_D_DST_SURFACE_STRIDE_0（图像的STRIDE）和NVDLA_SDP_D_DST_LINE_STTIDE_0（行值的STRIDE）的值；

17:50 2018/7/31
1、外网服务器IP：10.20.123.18，用户名：zhangwang，密码：123456，VNCSERVER：4
2、ug1209-embedded-design-tutorial，学至P24
18:41 2018/7/31

14:07 2018/8/1
1、ug1209-embedded-design-tutorial，学至P32

18:13 2018/8/1

9:48 2018/8/3
1、Verilog中数的表示方法：4'b0001，4'h1，4'd1；4'b1111，4'hf，4'd15；
2、
10:02 2018/8/7
1、卷级核数量和通道数量的关系：卷积核数量是卷积层设计的一项内容，通道数量描述的是输入数据的结构，每个卷积核的通道数应与输入数据的通道数保持一致，输入数据的所有通道同时与卷积核进行运算，不论有多少通道每个卷积核作用在输入数据一个区域运算后得到一个值的结果，本层卷积核的数量决定了本层输出数据的通道数。
17:10 2018/8/13

10:14 2018/8/14
 interpolator
16:27 2018/8/17
NVDLA CDP模块讨论会：
1、LRN层变换的应用意义？
2、模块内外部数据操作的格式需要理清楚，buffin模块和syncfifo模块中数据的关系；
3、linear_start的值，当是exponential模式时取零吗？不是，LUT_LE_START_LOW/HIGH 参数直接输入；
4、精度保持的原理是什么？Oin与SFin的值怎么确定，当是exponential模式时Oin=0吗？
5、搞清cvtin和cvtout的详细运算过程
9:47 2018/8/27
1、Excel插入行快捷键：Ctrl+Shift+'+';
2、Excel删除行快捷键：Ctrl+‘-’；

15:58 2018/8/27
1、NVDLA测试CASE所在的位置：./hw/verif/tests/trace_tests/nv_small
2、SqueeseDet联合NVDLA调试思路：第一步，梳理模型相关配置寄存器->基于NVDLA的Test Case配置文件形成SqueeseDet配置C程序->编译+板级调试；第二步，详细研究CCore工作原理，详细梳理相关配置寄存器，形成所需的SqueeseDet配置C程序->编译 + 板级调试；
3、SqueeseDet 卷积算法比较关注的参数：
inputdata_address 

outputdata_address

width   
height   
inputchannel 

kernel_size

outputchannel 

padding
9:50 2018/8/28

15:19 2018/8/31
1、验证需求的想法：是不是可以按着数据通路的顺序，梳理涉及到的相关寄存器参数，来进行验证。


17:08 2018/8/31
1、Linux死机怎么办？
Linux 最初就是不需要图形界面的，因为有一个很强大的文字界面。
1、按 Ctrl-Alt-F1（F1-F6 一般来说都可以），然后等一会儿，就会切换到 tty，也就是所谓的文字界面。
2、这个时候需要用用户名密码登入。注意，可能键盘输入的速度比较慢，不过应该还是可以忍受的。
3、下面在提示符后面输入 top 回车，这时会看到一张动态的表，上面列出了耗用资源最多的进程。
4、观察它刷新一两次，按q退出，然后输入 kill ，其中的 PID 你可以在 top 里面看到。这个时候应该会快了不少，如果你发现没有成功结束掉，就再输入 kill -KILL ，这次基本上就没问题了。

9:39 2018/9/3
1、利用verdi查看波形文件，需要两个文件rtl.f文件和novas.fsdb，命令verdi -f rtl.f -ssf novas.fsdb &;

9:21 2018/9/4
1、海周CDP测试Case所在的位置：/Data/usr/zhuhaizhou/testbench/cdp_tb/cdp_cmodel/novas.fsdb

14:36 2018/9/7
NV_NVDLA_cdp.v源代码研究：
1、处理例化子模块之外，其中有一些额外的代码，主要用来实现一些关键信号在运行时的监控，包括mon_reg2dp_sqsum_bypass、mon_reg2dp_lut_le_function、mon_reg2dp_mul_bypass、mon_reg2dp_nan_to_zero、mon_reg2dp_normalz_len，还包括一个性能统计计数器mon_gap_between_layers. (mon表示monitor的意思)
2、标记信号上升沿下降沿的方法：第一步，将目标信号a寄存为a_reg，第二步，利用组合逻辑生成两个标记信号标记上升沿和下降沿的信号a_pos <= a &(not a_reg)(表示a现在为1，一个周期以前为零，所以为上升沿)，a_neg <= (not a) & a_reg(表示a现在为0，一个周期以前为1，所以为下降沿)。

9:35 2018/9/10
文档整理：
1、@马崇鹤 @贾雷雷 @张旺 ，最终的Unione文档位置：Upload-only/FTC-datasheet/US536_Datasheet_release_v1.10.docx，需要review一下，修改格式/内容/表达/标点的错误，对照PDF文档。要求在9月12日前完成，优先级最高；小马：DDR+USB+timer+SSP，雷雷：PWM+INTC+spi+I2S  张旺：I2C+DMAC+SDC+UART

10:04 2018/9/11
1、CDP模块源代码研究：
1）xxx_d1表示经过一个时钟周期延时后的寄存信号；
2）如何产生一个信号沿对应脉冲信号：第一步，寄存该信号a_reg，第二部，a_pulse <= a & (~a_reg) （产生上升沿对应脉冲），a_pulse <= ~a & a_reg;

2、专利申请想法：一种一组相邻数据求和输出电路的设计；

3、CDP验证存在的一个问题：多个Layer的配置验证时，配置寄存器和硬件运行时序的配合问题验证平台应该怎么处理？

16:57 2018/9/12
1、NVDLA生成源码的配置文件存储位置/Data/usr/zhangwang/projects/nvdla_git/hw/spec/defs/
9:31 2018/9/18
涛哥和宝骏联调算法与NVDLA的信息（外网服务器）：
1、image输入： /home/usr/kouzhentao/nvdla/hw/verif/tests/trace_tests/nv_small/img_51x96x4_1x10x4x32_R8G8B8A8_int8_0/img_51x96x4_1x10x4x32_R8G8B8A8_int8_0.cfg 
input 32x20x4
3x3x4x16
15x9x16
stride_x=stide_y=2, 没padding
2、Feature输入：
/home/usr/kouzhentao/nvdla/hw/verif/tests/trace_tests/nv_small/dc_24x33x55_5x5x55x25_int8_0/dc_24x33x55_5x5x55x25_int8_0.cfg
33x19x16
3x3x16x32
pading_top=left=right=bottom=1
stride_x=y=1,  outptu: 33x19x32  跟C 卷积结果 和 relu都bit match
3、板级调试过程
1）编写NVDLA运算模块的配置C程序，基于NVDLA原配置文件.cfg编写，需要include头文件opendla.h，定义reg_write函数、reg_read函数、poll_reg_equal函数，定义NV_BASE_ADDR等。
2）利用ARM编译环境unione_nvdla编译C程序，并生成.elf文件；
3）利用Vivado环境综合实现挂载NVDLA的andes_n10系统，生成.bit文件，并下载至FPGA，注意源代码中的RAM模块要预先写入“钩子”代码；
4）利用CVD调试环境，打开并运行.cfs文件使FPGA进入调试模式，打开并运行.cmm文件，将.elf程序文件和.bin数据文件载入；
5）运行调试程序，观察并输出结果。

4、外网服务器网址：10.20.123.19，zhangwang，密码：xx2xxxxxxx （可以从笔记本登陆，不可以从台式机登陆）
     内网服务器网址：172.30.0.123，zhangwang，密码：123456 （不可以从笔记本登陆，可以从台式机登陆）
     公司FTP地址：172.30.0.3（007ftp.it.yzs.io） （可以从笔记本登陆，也可以从台式机登陆，并作为向内网传输数据的中转站）
     调试机网址：172.30.0.222，admin，密码：123456 （不可以从笔记本登陆，可以从台式机登陆）

5、算法板级调试：
image输入CASE：
1）weight数据无法写入；原因：地址超出系统范围，系统Memory地址在80000000范围内；
2）Bias数据要求32Byte对齐，需要补零，其相应的配置寄存器BS_LINE_STRIDE_0、BS_SURFACE_STRIDE_0需要设置成合适的值；


9:15 2018/9/20

17:31 2018/9/20
1、SDP模块输入数据Bias、Mean、Variance等数据的类型是什么？
2、CC模块
17:31 2018/9/27
1、雷雷测试CDP模块的Bug：随机产生datin_offset时，如果遇到其值为0时，mismatch，但是当把datin_offset固定设置为0时，pass！
1）Debug方法：在NVDLA的cdp_8x8x64_lrn3_int8_0测试Case基础上，复制雷雷测试Case的配置值及输入数据，测试NVDLA仿真时输出的数据值。
2）完成了.dat的修改，还没有进行.cfg的修改；
3）原测试Case备份为cdp_8x8x64_lrn3_int8_0_backup;